version: '3'
services:
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    networks:
      - assessment-network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  postgres:
    image: 'postgres:latest'
    ports:
      - '5432:5432'
    networks:
      - assessment-network
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ecommerce
  product-service:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.compose
    networks:
      - assessment-network
    volumes:
      - ./apps/product-service:/app/apps/product-service
    ports:
      - 3001:3001
    command: npx nx serve apps/product-service
    depends_on:
      - postgres
  order-service:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.compose
    networks:
      - assessment-network
    volumes:
      - ./apps/order-service:/app/apps/order-service
    ports:
      - 3002:3002
    command: npx nx serve apps/order-service
    depends_on:
      - postgres
  user-service:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.compose
    networks:
      - assessment-network
    volumes:
      - ./apps/user-service:/app/apps/user-service
    ports:
      - 3000:3000
    command: npx nx serve apps/user-service
    depends_on:
      - postgres
  nginx:
    image: 'nginx:latest'
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - product-service
      - order-service
      - user-service

networks:
  assessment-network:
    driver: bridge
    
volumes:
  postgres_data: